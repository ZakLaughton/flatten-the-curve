{"version":3,"sources":["components/Person.js","components/GameBoard.js","components/Graph.js","utils/utils.js","state/gameReducer.js","App.js","serviceWorker.js","index.js"],"names":["Person","gridSize","personData","dispatch","day","id","infectedDay","isCured","location","isSymptomatic","cellSizeInPercent","personStyle","height","width","backgroundColor","borderRadius","position","left","x","bottom","y","border","boxSizing","sociallyDistancedSquareStyle","quarantinedSquareStyle","span","positionTransition","duration","style","onClick","type","payload","mobility","Board","styled","div","props","boardSize","GameBoard","people","onContextMenu","e","preventDefault","map","person","index","key","Graph","historicalInfectedCount","totalPeopleCount","interpolation","data","animate","fill","domain","getInfectedPeopleCount","filter","length","reducer","state","newDayNumber","reduce","newPeople","includes","newLocation","possibleMoves","getSurroundingCells","Math","floor","random","coordinates","calculateMove","some","movedInfectedPeople","peopleCopy","peopleToRecover","infectionZones","direction","surroundingCell","flat","infectionZone","chanceOfGettingInfected","infect","newInfectedPeopleCount","infectedPercentage","count","topOfTheCurve","personIndex","findIndex","init","initialState","console","log","peopleDensity","numberOfPeople","initialPeople","arrayToShuffle","j","i","parseInt","shuffleArray","positionList","push","generateAllPositions","slice","surroundingCells","isOnLeftEdge","move","isOnBottomEdge","isOnRightEdge","isOnTopEdge","GameGrid","main","Stats","TopOfTheCurve","GraphContainer","App","useEffect","document","hostname","search","ReactGA","initialize","pageview","useReducer","gameMetrics","infectedPeopleCount","symptomaticCount","curedPeopleCount","fontSize","textAlign","color","Boolean","window","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b600992.chunk.js","sourcesContent":["import React from 'react';\nimport { motion } from 'framer-motion';\n\nfunction Person({ gridSize, personData, dispatch, day }) {\n  const { id, infectedDay, isCured, location } = personData;\n  const isSymptomatic = !isCured && infectedDay >= 0 && day - infectedDay >= 5;\n  const handleClick = () => {\n    const newMobility = isSymptomatic ? 'QUARANTINED' : 'SOCIALLY_DISTANCED';\n    dispatch({ type: 'UPDATE_PERSON_MOBILITY', payload: { id, mobility: newMobility } });\n    dispatch({ type: 'INCREMENT_DAY' });\n  };\n\n  const cellSizeInPercent = 100 / gridSize\n\n  // ! styled-components slow this movement to a crawl. Don't use them here\n\n  const personStyle = {\n    height: `${cellSizeInPercent}%`,\n    width: `${cellSizeInPercent}%`,\n    backgroundColor: isCured ? '#57c1ff' : isSymptomatic ? '#448844' : 'white',\n    borderRadius: `50%`,\n    position: `absolute`,\n    left: `${(cellSizeInPercent) * location.x}%`,\n    bottom: `${(cellSizeInPercent) * location.y}%`,\n    border: '1px solid black',\n    // Use to reveal all infected for debugging:\n    // border: infectedDay >= 0 ? '3px solid green' : '1px solid black',\n    boxSizing: `border-box`,\n  };\n\n  const sociallyDistancedSquareStyle = {\n    height: `${cellSizeInPercent}%`,\n    width: `${cellSizeInPercent}%`,\n    position: `absolute`,\n    left: `${(cellSizeInPercent) * location.x}%`,\n    bottom: `${(cellSizeInPercent) * location.y}%`,\n    border: `3px dashed #595959`,\n    boxSizing: `border-box`,\n  };\n\n  const quarantinedSquareStyle = {\n    height: `${cellSizeInPercent}%`,\n    width: `${cellSizeInPercent}%`,\n    position: `absolute`,\n    left: `${(cellSizeInPercent) * location.x}%`,\n    bottom: `${(cellSizeInPercent) * location.y}%`,\n    border: `3px ridge #4c0000`,\n    boxSizing: `border-box`,\n  };\n\n\n  return (\n    <>\n      <motion.span\n        positionTransition={{ duration: 0.4 }}\n        style={personStyle}\n        onClick={handleClick}\n      />\n      {personData.mobility === 'SOCIALLY_DISTANCED' && <div style={sociallyDistancedSquareStyle} />}\n      {personData.mobility === 'QUARANTINED' && <div style={quarantinedSquareStyle}></div>}\n    </>\n  );\n}\n\nexport default Person;\n","import React from 'react';\nimport Person from './Person';\nimport styled from 'styled-components';\n\nfunction GameBoard({ boardSize, gridSize, people, dispatch, day }) {\n  return (\n    <Board\n      boardSize={boardSize}\n      onContextMenu={(e) => {\n        e.preventDefault();\n        // setInterval(movePeople, 400);\n        dispatch({ type: 'INCREMENT_DAY' });\n      }}\n    >\n      {people.map((person, index) => (\n        <Person\n          personData={person}\n          key={index}\n          gridSize={gridSize}\n          dispatch={dispatch}\n          day={day}\n          boardSize={boardSize}\n        />\n      ))}\n    </Board>\n  );\n}\n\nconst Board = styled.div`\n  width: 100vw;\n  height: 100vw;\n  max-width: ${(props) => `${props.boardSize}px`};\n  max-height: ${(props) => `${props.boardSize}px`};\n  background-color: #b7b7b7;\n  position: relative;\n  margin: auto;\n`;\n\nexport default GameBoard;\n","import React from \"react\";\nimport { VictoryArea, VictoryChart } from \"victory\";\n\nexport const Graph = ({ historicalInfectedCount, totalPeopleCount }) => {\n  return (\n    <VictoryChart>\n      <VictoryArea\n        interpolation='cardinal'\n        data={historicalInfectedCount}\n        x='day'\n        y='count'\n        animate={{ duration: 300 }}\n        style={{ data: { fill: `rgba(255, 0, 0, 0.6)` } }}\n        domain={{ y: [0, totalPeopleCount] }}\n      ></VictoryArea>\n    </VictoryChart>\n  );\n};\n\nexport default Graph;\n","export function shuffleArray(arrayToShuffle) {\n  for (\n    var j, x, i = arrayToShuffle.length;\n    i;\n    j = parseInt(Math.random() * i),\n      x = arrayToShuffle[--i],\n      arrayToShuffle[i] = arrayToShuffle[j],\n      arrayToShuffle[j] = x\n  );\n  return arrayToShuffle;\n}\n\nexport function getInfectedPeopleCount(people) {\n  return people.filter((person) => !person.isCured && person.infectedDay >= 0).length;\n}\n\n// TODO: Make this\n// export function isSymptomatic(person, day) {\n//   return !person.isCured && person.infectedDay >= 0 && day - person.infectedDay >= 5;\n// }\n","import { getInfectedPeopleCount, shuffleArray } from \"../utils/utils\";\nimport { initialState } from \"../App\";\n\nexport default function reducer(state, { type, payload }) {\n  switch (type) {\n    case \"INCREMENT_DAY\":\n      const newDayNumber = state.day + 1;\n      // Move people\n      const movedPeople = state.people.reduce((newPeople, person, index) => {\n        if ([\"SOCIALLY_DISTANCED\", \"QUARANTINED\"].includes(person.mobility)) return newPeople;\n        const newLocation = calculateMove(person.location, state.gridSize);\n\n        if (\n          newPeople.some(\n            (person) => person.location.x === newLocation.x && person.location.y === newLocation.y\n          )\n        ) {\n          newPeople[index] = person;\n        } else {\n          newPeople[index] = { ...person, location: newLocation };\n        }\n\n        return newPeople;\n      }, state.people);\n\n      // Infect\n      function infect() {\n        let peopleCopy = [...state.people];\n        const peopleToRecover = peopleCopy\n          .filter(\n            (person) =>\n              person.infectedDay !== -1 && !person.isCured && state.day - person.infectedDay > 19\n          )\n          .map((person) => person.id);\n        peopleCopy = peopleCopy.map((person) => {\n          if (peopleToRecover.includes(person.id)) person.isCured = true;\n          return person;\n        });\n\n        const contagiousPeople = state.people.filter(\n          (person) =>\n            person.infectedDay >= 0 && !person.isCured && person.mobility !== \"QUARANTINED\"\n        );\n        let infectionZones = contagiousPeople.map((person) => {\n          const neighborLocations = getSurroundingCells(person.location)\n            .filter((location) => [\"N\", \"E\", \"S\", \"W\"].includes(location.direction))\n            .map((surroundingCell) => surroundingCell.coordinates);\n\n          return neighborLocations;\n        });\n        infectionZones = infectionZones.flat();\n        const newlyInfectedPeople = state.people.map((person) => {\n          if (\n            person.infectedDay === -1 &&\n            infectionZones.some(\n              (infectionZone) =>\n                person.location.x === infectionZone.x && person.location.y === infectionZone.y\n            )\n          ) {\n            const chanceOfGettingInfected = person.mobility === \"SOCIALLY_DISTANCED\" ? 0.5 : 1;\n            if (Math.random() <= chanceOfGettingInfected) person.infectedDay = state.day;\n          }\n          return person;\n        });\n\n        return newlyInfectedPeople;\n      }\n      const movedInfectedPeople = infect(movedPeople);\n      const newInfectedPeopleCount = getInfectedPeopleCount(movedInfectedPeople);\n      const infectedPercentage = (newInfectedPeopleCount / state.people.length) * 100;\n\n      return {\n        ...state,\n        day: newDayNumber,\n        people: movedInfectedPeople,\n        historicalInfectedCount: [\n          ...state.historicalInfectedCount,\n          { day: newDayNumber, count: newInfectedPeopleCount },\n        ],\n        topOfTheCurve:\n          infectedPercentage > state.topOfTheCurve ? infectedPercentage : state.topOfTheCurve,\n      };\n\n    case \"UPDATE_PERSON_MOBILITY\":\n      const newPeople = [...state.people];\n      const personIndex = newPeople.findIndex((person) => person.id === payload.id);\n      newPeople[personIndex].mobility = payload.mobility;\n\n      return { ...state, people: newPeople };\n    case \"RESTART\":\n      return init(initialState);\n    default:\n      return state;\n  }\n}\n\nexport function init(initialState) {\n  console.log(\"INIT>>>\");\n  const { gridSize, peopleDensity } = initialState;\n  const numberOfPeople = Math.floor(gridSize * gridSize * peopleDensity) || 4;\n  const generateInitialPeople = () => {\n    const allPositions = generateAllPositions();\n    let shuffledLocations = shuffleArray(allPositions);\n    const people = shuffledLocations.slice(0, numberOfPeople).map((location, index) => {\n      return {\n        id: index,\n        location,\n        infectedDay: -1,\n        isCured: false,\n        mobility: \"FREE\",\n      };\n    });\n    return people;\n  };\n\n  function generateAllPositions() {\n    let positionList = [];\n    for (let x = 0; x < gridSize; x++) {\n      for (let y = 0; y < gridSize; y++) {\n        positionList.push({ x, y });\n      }\n    }\n    return positionList;\n  }\n\n  const initialPeople = generateInitialPeople();\n  const indexToInfect = Math.floor(Math.random() * initialPeople.length);\n  initialPeople[indexToInfect].infectedDay = 0;\n  return { ...initialState, people: initialPeople };\n}\n\nfunction calculateMove(location, gridSize) {\n  const possibleMoves = getSurroundingCells(location, gridSize);\n  const newLocation = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n\n  return newLocation.coordinates;\n}\n\nfunction getSurroundingCells(location, gridSize) {\n  const { x, y } = location;\n  let surroundingCells = [\n    { direction: \"N\", coordinates: { x: x + 0, y: y + 1 } },\n    { direction: \"NE\", coordinates: { x: x + 1, y: y + 1 } },\n    { direction: \"E\", coordinates: { x: x + 1, y: y + 0 } },\n    { direction: \"SE\", coordinates: { x: x + 1, y: y - 1 } },\n    { direction: \"S\", coordinates: { x: x + 0, y: y - 1 } },\n    { direction: \"SW\", coordinates: { x: x - 1, y: y - 1 } },\n    { direction: \"W\", coordinates: { x: x - 1, y: y + 0 } },\n    { direction: \"NW\", coordinates: { x: x - 1, y: y + 1 } },\n  ];\n\n  if (isOnLeftEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => ![\"NW\", \"W\", \"SW\"].includes(move.direction)\n    );\n  if (isOnBottomEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => ![\"SW\", \"S\", \"SE\"].includes(move.direction)\n    );\n  if (isOnRightEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => ![\"SE\", \"E\", \"NE\"].includes(move.direction)\n    );\n  if (isOnTopEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => ![\"NE\", \"N\", \"NW\"].includes(move.direction)\n    );\n\n  return surroundingCells;\n\n  function isOnLeftEdge(location) {\n    return location.x === 0;\n  }\n  function isOnBottomEdge(location) {\n    return location.y === 0;\n  }\n  function isOnRightEdge(location) {\n    return location.x === gridSize - 1;\n  }\n  function isOnTopEdge(location) {\n    return location.y === gridSize - 1;\n  }\n}\n","import React, { useReducer, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport GameBoard from \"./components/GameBoard\";\nimport Graph from \"./components/Graph\";\nimport { getInfectedPeopleCount } from \"./utils/utils\";\nimport reducer, { init } from \"./state/gameReducer\";\nimport \"./App.css\";\nimport ReactGA from \"react-ga\";\n\nconst ARRAY_SEARCH_RESULT_NOT_FOUND = -1;\n\nfunction initializeReactGA() {\n  if (document.location.hostname.search(`zaklaughton.dev`) !== ARRAY_SEARCH_RESULT_NOT_FOUND) {\n    ReactGA.initialize(`UA-67511792-5`);\n    ReactGA.pageview(`/`);\n  }\n}\n\nexport const initialState = {\n  day: 0,\n  people: [],\n  historicalInfectedCount: [{ day: 0, count: 0 }],\n  gridSize: 25,\n  boardSize: 700,\n  peopleDensity: 0.25,\n  topOfTheCurve: 0,\n};\n\nfunction App() {\n  useEffect(() => {\n    initializeReactGA();\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, initialState, init);\n  const {\n    day,\n    people,\n    historicalInfectedCount,\n    gridSize,\n    boardSize,\n    peopleDensity,\n    topOfTheCurve,\n  } = state;\n\n  const gameMetrics = { gridSize, boardSize, peopleDensity };\n\n  const infectedPeopleCount = getInfectedPeopleCount(people);\n  const symptomaticCount = people.filter(\n    ({ isCured, infectedDay }) => !isCured && infectedDay >= 0 && day - infectedDay >= 5\n  ).length;\n  const totalPeopleCount = people.length;\n  const curedPeopleCount = people.filter((person) => person.isCured).length;\n\n  return (\n    <GameGrid boardSize={boardSize}>\n      <h1 style={{ fontSize: `1.3rem`, textAlign: `center` }}>\n        FLATTEN THE CURVE (beta) – See how low you can keep the curve!\n      </h1>\n      <p style={{ fontSize: `1.3rem`, textAlign: `center` }}>\n        One person starts infected. Symptoms show on day 5.\n      </p>\n      <p style={{ fontSize: `1.3rem`, textAlign: `center` }}>\n        Click or tap people to social distance (won't move, lower chance of infection). Click or tap\n        people with symptoms to quarantine (can't move, no chance of infecting others).\n      </p>\n      <TopOfTheCurve>Top of the curve: {Math.floor(topOfTheCurve)}%</TopOfTheCurve>\n\n      <GameBoard\n        {...gameMetrics}\n        dispatch={dispatch}\n        people={people}\n        day={day}\n        gridSize={gridSize}\n        boardSize={boardSize}\n      />\n      <Stats>\n        <div>\n          <span style={{ color: `rgba(255, 0, 0, 0.8)` }}>{infectedPeopleCount}</span> infected (\n          <span style={{ color: `#448844` }}>{symptomaticCount}</span>{\" \"}\n          {symptomaticCount > 1 || symptomaticCount === 0 ? \"have\" : \"has\"} symptoms)\n        </div>\n        <div>\n          Recovered: <span style={{ color: `#57c1ff` }}>{curedPeopleCount}</span>\n        </div>\n        <button\n          onClick={() => {\n            dispatch({ type: \"RESTART\" });\n          }}\n        >\n          Restart\n        </button>\n      </Stats>\n      <GraphContainer>\n        <Graph\n          historicalInfectedCount={historicalInfectedCount}\n          totalPeopleCount={totalPeopleCount}\n        />\n      </GraphContainer>\n    </GameGrid>\n  );\n}\n\nconst GameGrid = styled.main`\n  color: rgba(255, 255, 255, 0.8);\n  width: 100vw;\n  height: 100vh;\n  max-width: ${(props) => `${props.boardSize}px`};\n  margin: auto;\n`;\n\nconst Stats = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n  font-size: 1.2rem;\n  flex-wrap: wrap;\n`;\n\nconst TopOfTheCurve = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n  font-size: 2rem;\n  font-weight: 500;\n`;\n\nconst GraphContainer = styled.div`\n  width: 200px;\n  height: 200px;\n  margin: auto;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// export const GameContext = createContext(initialState);\n\n// const Store = ({ children }) => {\n//   const [state, dispatch] = useReducer(Reducer, initialState);\n//   return <GameContext.Provider value={[state, dispatch]}>{children}</GameContext.Provider>;\n// };\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}