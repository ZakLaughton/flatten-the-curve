{"version":3,"sources":["components/Person.js","components/GameBoard.js","components/Graph.js","utils/utils.js","state/gameReducer.js","App.js","serviceWorker.js","index.js"],"names":["Person","gridSize","personData","dispatch","day","id","infectedDay","isCured","location","isSymptomatic","personStyle","height","width","backgroundColor","borderRadius","position","left","x","bottom","y","border","boxSizing","sociallyDistancedSquareStyle","quarantinedSquareStyle","span","positionTransition","duration","style","onClick","type","payload","mobility","Board","styled","div","props","boardSize","GameBoard","people","onContextMenu","e","preventDefault","map","person","index","key","Graph","historicalInfectedCount","totalPeopleCount","infectedGraphData","count","yDomain","xDomain","xTickValues","tickArray","i","push","setXTickValues","yTickValues","percentage","setYTickValues","animation","stackBy","curve","attr","attrAxis","orientation","tickValues","tickFormat","n","title","data","opacity","color","getInfectedPeopleCount","filter","length","reducer","state","newDayNumber","reduce","newPeople","includes","newLocation","possibleMoves","getSurroundingCells","Math","floor","random","coordinates","calculateMove","some","movedInfectedPeople","peopleCopy","peopleToRecover","infectionZones","direction","surroundingCell","flat","infectionZone","chanceOfGettingInfected","infect","personIndex","findIndex","surroundingCells","isOnLeftEdge","move","isOnBottomEdge","isOnRightEdge","isOnTopEdge","GameGrid","main","GraphContainer","App","useReducer","peopleDensity","initialState","numberOfPeople","initialPeople","arrayToShuffle","j","parseInt","shuffleArray","positionList","generateAllPositions","slice","gameMetrics","infectedPeopleCount","curedPeopleCount","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSA4DeA,MAzDf,YAA0D,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,SAAUC,EAAO,EAAPA,IACxCC,EAAuCH,EAAvCG,GAAIC,EAAmCJ,EAAnCI,YAAaC,EAAsBL,EAAtBK,QAASC,EAAaN,EAAbM,SAC5BC,GAAiBF,GAAWD,GAAe,GAAKF,EAAME,GAAe,EASrEI,EAAc,CAClBC,OAAO,GAAD,OAAK,IAAMV,EAAX,KACNW,MAAM,GAAD,OAAK,IAAMX,EAAX,KACLY,gBAAiBN,EAAU,UAAYE,EAAgB,UAAY,QACnEK,aAAa,MACbC,SAAS,WACTC,KAAK,GAAD,OAAM,IAAMf,EAAYO,EAASS,EAAjC,KACJC,OAAO,GAAD,OAAM,IAAMjB,EAAYO,EAASW,EAAjC,KACNC,OAAQ,kBAGRC,UAAU,cAGNC,EAA+B,CAGnCP,SAAS,WACTC,KAAK,GAAD,OAAKR,EAAS,GAAd,MACJU,OAAO,GAAD,OAAKV,EAAS,GAAd,MACNY,OAAO,qBACPC,UAAU,cAGNE,EAAyB,CAG7BR,SAAS,WACTC,KAAK,GAAD,OAAKR,EAAS,GAAd,MACJU,OAAO,GAAD,OAAKV,EAAS,GAAd,MACNY,OAAO,kBACPC,UAAU,cAEZ,OACE,oCACE,kBAAC,IAAOG,KAAR,CACEC,mBAAoB,CAAEC,SAAU,IAChCC,MAAOjB,EACPkB,QA9Cc,WAElBzB,EAAS,CAAE0B,KAAM,yBAA0BC,QAAS,CAAEzB,KAAI0B,SADtCtB,EAAgB,cAAgB,wBAEpDN,EAAS,CAAE0B,KAAM,qBA6CU,uBAAxB3B,EAAW6B,UAAqC,yBAAKJ,MAAOL,IACpC,gBAAxBpB,EAAW6B,UAA8B,yBAAKJ,MAAOJ,M,qNC3B5D,IAAMS,EAAQC,IAAOC,IAAV,KAGI,SAACC,GAAD,gBAAcA,EAAMC,UAApB,SACC,SAACD,GAAD,gBAAcA,EAAMC,UAApB,SAMDC,EAlCf,YAAoE,IAA/CD,EAA8C,EAA9CA,UAAWnC,EAAmC,EAAnCA,SAAUqC,EAAyB,EAAzBA,OAAQnC,EAAiB,EAAjBA,SAAUC,EAAO,EAAPA,IAC1D,OACE,kBAAC4B,EAAD,CACEI,UAAWA,EACXG,cAAe,SAACC,GACdA,EAAEC,iBAEFtC,EAAS,CAAE0B,KAAM,oBAGlBS,EAAOI,KAAI,SAACC,EAAQC,GAAT,OACV,kBAAC,EAAD,CACE1C,WAAYyC,EACZE,IAAKD,EACL3C,SAAUA,EACVE,SAAUA,EACVC,IAAKA,EACLgC,UAAWA,S,OC4CNU,EAvDM,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,wBAAyBC,EAA4B,EAA5BA,iBAAkB5C,EAAU,EAAVA,IAC3D6C,EAAoBF,EAAwBL,KAAI,YACpD,MAAO,CAAEzB,EAD+D,EAAjBb,IACtCe,EADuD,EAAZ+B,UAGxDC,EAAU,CAAC,EAAGH,GACdI,EAAU,CAAC,EAAGhD,GAUdiD,EATiB,WAErB,IADA,IAAIC,EAAY,CAAC,GACRC,EAAI,EAAGA,EAAInD,EAAKmD,IACnBA,EAAI,IAAM,GACZD,EAAUE,KAAKD,GAGnB,OAAOD,EAEWG,GASdC,EARiB,WAGrB,IAFA,IACIJ,EAAY,GAChB,MAFwB,CAAC,EAAG,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAEzE,eAAwC,CAAnC,IAAIK,EAAU,KACjBL,EAAUE,KAAKG,EAAaX,GAE9B,OAAOM,EAEWM,GAEpB,OACE,kBAAC,IAAD,CAAgBC,WAAS,EAACC,QAAQ,IAAIX,QAASA,EAASC,QAASA,EAASW,MAAM,iBAC9E,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEF,WAAS,EACTG,KAAK,IACLC,SAAS,IACTC,YAAY,SACZC,WAAYd,EACZe,WAAY,SAACC,GAAD,OAAOA,GACnBC,MAAM,OACNvD,SAAS,QAEX,kBAAC,IAAD,CACEuD,MAAM,aACNvD,SAAS,MACT8C,WAAS,EACTG,KAAK,IACLC,SAAS,IACTC,YAAY,OACZC,WAAYT,EACZU,WAAY,SAACC,GAAD,OAAQA,EAAIrB,EAAoB,OAE9C,kBAAC,IAAD,CAAYa,WAAS,EAACU,KAAMtB,EAAmBuB,QAAS,GAAK7C,MAAO,GAAI8C,MAAM,UChD7E,SAASC,EAAuBpC,GACrC,OAAOA,EAAOqC,QAAO,SAAChC,GAAD,OAAaA,EAAOpC,SAAWoC,EAAOrC,aAAe,KAAGsE,O,YCXhE,SAASC,EAAQC,EAAjB,GAA4C,IAAlBjD,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAC7C,OAAQD,GACN,IAAK,gBACH,IAAMkD,EAAeD,EAAM1E,IAAM,EAEb0E,EAAMxC,OAAO0C,QAAO,SAACC,EAAWtC,EAAQC,GAC1D,GAAI,CAAC,qBAAsB,eAAesC,SAASvC,EAAOZ,UAAW,OAAOkD,EAC5E,IAAME,EA+Ed,SAAuB3E,EAAUP,GAC/B,IAAMmF,EAAgBC,EAAoB7E,EAAUP,GAGpD,OAFoBmF,EAAcE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAcR,SAExDa,YAnFOC,CAAc/C,EAAOnC,SAAUsE,EAAM7E,UAYzD,OATEgF,EAAUU,MACR,SAAChD,GAAD,OAAYA,EAAOnC,SAASS,IAAMkE,EAAYlE,GAAK0B,EAAOnC,SAASW,IAAMgE,EAAYhE,KAGvF8D,EAAUrC,GAASD,EAEnBsC,EAAUrC,GAAV,eAAwBD,EAAxB,CAAgCnC,SAAU2E,IAGrCF,IACNH,EAAMxC,QA4CT,IAAMsD,EAzCN,WACE,IAAIC,EAAU,YAAOf,EAAMxC,QACrBwD,EAAkBD,EACrBlB,QACC,SAAChC,GAAD,OAC0B,IAAxBA,EAAOrC,cAAuBqC,EAAOpC,SAAWuE,EAAM1E,IAAMuC,EAAOrC,YAAc,MAEpFoC,KAAI,SAACC,GAAD,OAAYA,EAAOtC,MAC1BwF,EAAaA,EAAWnD,KAAI,SAACC,GAE3B,OADImD,EAAgBZ,SAASvC,EAAOtC,MAAKsC,EAAOpC,SAAU,GACnDoC,KAGT,IAIIoD,EAJqBjB,EAAMxC,OAAOqC,QACpC,SAAChC,GAAD,OACEA,EAAOrC,aAAe,IAAMqC,EAAOpC,SAA+B,gBAApBoC,EAAOZ,YAEnBW,KAAI,SAACC,GAKzC,OAJ0B0C,EAAoB1C,EAAOnC,UAClDmE,QAAO,SAACnE,GAAD,MAAc,CAAC,IAAK,IAAK,IAAK,KAAK0E,SAAS1E,EAASwF,cAC5DtD,KAAI,SAACuD,GAAD,OAAqBA,EAAgBR,kBAmB9C,OAfAM,EAAiBA,EAAeG,OACJpB,EAAMxC,OAAOI,KAAI,SAACC,GAC5C,IAC0B,IAAxBA,EAAOrC,aACPyF,EAAeJ,MACb,SAACQ,GAAD,OACExD,EAAOnC,SAASS,IAAMkF,EAAclF,GAAK0B,EAAOnC,SAASW,IAAMgF,EAAchF,KAEjF,CACA,IAAMiF,EAA8C,uBAApBzD,EAAOZ,SAAoC,GAAM,EAC7EuD,KAAKE,UAAYY,IAAyBzD,EAAOrC,YAAcwE,EAAM1E,KAE3E,OAAOuC,KAKiB0D,GAC5B,OAAO,eACFvB,EADL,CAEE1E,IAAK2E,EACLzC,OAAQsD,EACR7C,wBAAwB,GAAD,mBAClB+B,EAAM/B,yBADY,CAErB,CAAE3C,IAAK2E,EAAc7B,MAAOwB,EAAuBkB,QAIzD,IAAK,yBACH,IAAMX,EAAS,YAAOH,EAAMxC,QACtBgE,EAAcrB,EAAUsB,WAAU,SAAC5D,GAAD,OAAYA,EAAOtC,KAAOyB,EAAQzB,MAG1E,OAFA4E,EAAUqB,GAAavE,SAAWD,EAAQC,SAEnC,eAAK+C,EAAZ,CAAmBxC,OAAQ2C,IAC7B,QACE,OAAOH,GAWb,SAASO,EAAoB7E,EAAUP,GAAW,IACxCgB,EAAST,EAATS,EAAGE,EAAMX,EAANW,EACPqF,EAAmB,CACrB,CAAER,UAAW,IAAKP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,IAClD,CAAE6E,UAAW,KAAMP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,IACnD,CAAE6E,UAAW,IAAKP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,IAClD,CAAE6E,UAAW,KAAMP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,IACnD,CAAE6E,UAAW,IAAKP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,IAClD,CAAE6E,UAAW,KAAMP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,IACnD,CAAE6E,UAAW,IAAKP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,IAClD,CAAE6E,UAAW,KAAMP,YAAa,CAAExE,EAAGA,EAAI,EAAGE,EAAGA,EAAI,KAoBrD,OAEA,SAAsBX,GACpB,OAAsB,IAAfA,EAASS,EApBdwF,CAAajG,KACfgG,EAAmBA,EAAiB7B,QAClC,SAAC+B,GAAD,OAAW,CAAC,KAAM,IAAK,MAAMxB,SAASwB,EAAKV,eAoB/C,SAAwBxF,GACtB,OAAsB,IAAfA,EAASW,EAnBdwF,CAAenG,KACjBgG,EAAmBA,EAAiB7B,QAClC,SAAC+B,GAAD,OAAW,CAAC,KAAM,IAAK,MAAMxB,SAASwB,EAAKV,eAmB/C,SAAuBxF,GACrB,OAAOA,EAASS,IAAMhB,EAAW,EAlB/B2G,CAAcpG,KAChBgG,EAAmBA,EAAiB7B,QAClC,SAAC+B,GAAD,OAAW,CAAC,KAAM,IAAK,MAAMxB,SAASwB,EAAKV,eAkB/C,SAAqBxF,GACnB,OAAOA,EAASW,IAAMlB,EAAW,EAjB/B4G,CAAYrG,KACdgG,EAAmBA,EAAiB7B,QAClC,SAAC+B,GAAD,OAAW,CAAC,KAAM,IAAK,MAAMxB,SAASwB,EAAKV,eAGxCQ,E,4RCxCT,IAAMM,EAAW7E,IAAO8E,KAAV,KAORC,EAAiB/E,IAAOC,IAAV,KAKL+E,EAzFf,WAAe,MA4CaC,qBAAWrC,EA3ChB,CACnBzE,IAAK,EACLkC,OAAQ,GACRS,wBAAyB,CAAC,CAAE3C,IAAK,EAAG8C,MAAO,IAC3CjD,SAAU,GACVmC,UAAW,IACX+E,cAAe,KAGjB,SAAcC,GAAe,IACnBnH,EAA4BmH,EAA5BnH,SAAUkH,EAAkBC,EAAlBD,cACZE,EAAiB/B,KAAKC,MAAMtF,EAAWA,EAAWkH,IAAkB,EA0BpEG,EF9CH,SAAsBC,GAC3B,IACE,IAAIC,EAAGvG,EAAGsC,EAAIgE,EAAe3C,OAC7BrB,EACAiE,EAAIC,SAASnC,KAAKE,SAAWjC,GAC3BtC,EAAIsG,IAAiBhE,GACrBgE,EAAehE,GAAKgE,EAAeC,GACnCD,EAAeC,GAAKvG,GAExB,OAAOsG,EEcqBG,CAa1B,WAEE,IADA,IAAIC,EAAe,GACV1G,EAAI,EAAGA,EAAIhB,EAAUgB,IAC5B,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAUkB,IAC5BwG,EAAanE,KAAK,CAAEvC,IAAGE,MAG3B,OAAOwG,EArBcC,IAEYC,MAAM,EAAGR,GAAgB3E,KAAI,SAAClC,EAAUoC,GACvE,MAAO,CACLvC,GAAIuC,EACJpC,WACAF,aAAc,EACdC,SAAS,EACTwB,SAAU,WAmBhB,OADAuF,EADsBhC,KAAKC,MAAMD,KAAKE,SAAW8B,EAAc1C,SAClCtE,YAAc,EACpC,eAAK8G,EAAZ,CAA0B9E,OAAQgF,OAzCvB,mBA4CNxC,EA5CM,KA4CC3E,EA5CD,KA6CLC,EAA6E0E,EAA7E1E,IAAKkC,EAAwEwC,EAAxExC,OAAQS,EAAgE+B,EAAhE/B,wBAAyB9C,EAAuC6E,EAAvC7E,SAAUmC,EAA6B0C,EAA7B1C,UAGlD0F,EAAc,CAAE7H,WAAUmC,YAAW+E,cAH0CrC,EAAlBqC,eAK7DY,EAAsBrD,EAAuBpC,GAC7C0F,EAAmB1F,EAAOqC,QAAO,SAAChC,GAAD,OAAYA,EAAOpC,WAASqE,OAC7D5B,EAAmBV,EAAOsC,QAAU,IAE1C,OACE,kBAACkC,EAAD,KACE,kBAAC,EAAD,iBACMgB,EADN,CAEE3H,SAAUA,EACVmC,OAAQA,EACRlC,IAAKA,EACLH,SAAUA,EACVmC,UAAWA,KAEb,wCAAc2F,GACd,yCAAeC,GACf,kBAAChB,EAAD,KACE,kBAAC,EAAD,CACE5G,IAAKA,EACL2C,wBAAyBA,EACzBC,iBAAkBA,OClERiF,QACW,cAA7BC,OAAO1H,SAAS2H,UAEe,UAA7BD,OAAO1H,SAAS2H,UAEhBD,OAAO1H,SAAS2H,SAASC,MACvB,2DCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf0d41cb.chunk.js","sourcesContent":["import React from 'react';\nimport { motion } from 'framer-motion';\n\nfunction Person({ gridSize, personData, dispatch, day }) {\n  const { id, infectedDay, isCured, location } = personData;\n  const isSymptomatic = !isCured && infectedDay >= 0 && day - infectedDay >= 5;\n  const handleClick = () => {\n    const newMobility = isSymptomatic ? 'QUARANTINED' : 'SOCIALLY_DISTANCED';\n    dispatch({ type: 'UPDATE_PERSON_MOBILITY', payload: { id, mobility: newMobility } });\n    dispatch({ type: 'INCREMENT_DAY' });\n  };\n\n  // ! styled-components slow this movement to a crawl. Don't use them here\n\n  const personStyle = {\n    height: `${100 / gridSize}%`,\n    width: `${100 / gridSize}%`,\n    backgroundColor: isCured ? '#57c1ff' : isSymptomatic ? '#448844' : 'white',\n    borderRadius: `50%`,\n    position: `absolute`,\n    left: `${(100 / gridSize) * location.x}%`,\n    bottom: `${(100 / gridSize) * location.y}%`,\n    border: '1px solid black',\n    // Use to reveal all infected for debugging:\n    // border: infectedDay >= 0 ? '3px solid green' : '1px solid black',\n    boxSizing: `border-box`,\n  };\n\n  const sociallyDistancedSquareStyle = {\n    // height: `${size}px`,\n    // width: `${size}px`,\n    position: `absolute`,\n    left: `${location[0]}px`,\n    bottom: `${location[1]}px`,\n    border: `3px dashed #595959`,\n    boxSizing: `border-box`,\n  };\n\n  const quarantinedSquareStyle = {\n    // height: `${size}px`,\n    // width: `${size}px`,\n    position: `absolute`,\n    left: `${location[0]}px`,\n    bottom: `${location[1]}px`,\n    border: `3px solid black`,\n    boxSizing: `border-box`,\n  };\n  return (\n    <>\n      <motion.span\n        positionTransition={{ duration: 0.4 }}\n        style={personStyle}\n        onClick={handleClick}\n      />\n      {personData.mobility === 'SOCIALLY_DISTANCED' && <div style={sociallyDistancedSquareStyle} />}\n      {personData.mobility === 'QUARANTINED' && <div style={quarantinedSquareStyle} />}\n    </>\n  );\n}\n\nexport default Person;\n","import React from 'react';\nimport Person from './Person';\nimport styled from 'styled-components';\n\nfunction GameBoard({ boardSize, gridSize, people, dispatch, day }) {\n  return (\n    <Board\n      boardSize={boardSize}\n      onContextMenu={(e) => {\n        e.preventDefault();\n        // setInterval(movePeople, 400);\n        dispatch({ type: 'INCREMENT_DAY' });\n      }}\n    >\n      {people.map((person, index) => (\n        <Person\n          personData={person}\n          key={index}\n          gridSize={gridSize}\n          dispatch={dispatch}\n          day={day}\n          boardSize={boardSize}\n        />\n      ))}\n    </Board>\n  );\n}\n\nconst Board = styled.div`\n  width: 100%;\n  height: 100%;\n  max-width: ${(props) => `${props.boardSize}px`};\n  max-height: ${(props) => `${props.boardSize}px`};\n  background-color: #b7b7b7;\n  position: relative;\n  margin: auto;\n`;\n\nexport default GameBoard;\n","import React from 'react';\nimport {\n  FlexibleXYPlot,\n  AreaSeries,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n} from 'react-vis';\n\nexport const Graph = ({ historicalInfectedCount, totalPeopleCount, day }) => {\n  const infectedGraphData = historicalInfectedCount.map(({ day, count }) => {\n    return { x: day, y: count };\n  });\n  const yDomain = [0, totalPeopleCount];\n  const xDomain = [0, day];\n  const setXTickValues = () => {\n    let tickArray = [0];\n    for (let i = 0; i < day; i++) {\n      if (i % 5 === 0) {\n        tickArray.push(i);\n      }\n    }\n    return tickArray;\n  };\n  const xTickValues = setXTickValues();\n  const setYTickValues = () => {\n    const percentageArray = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1];\n    let tickArray = [];\n    for (let percentage of percentageArray) {\n      tickArray.push(percentage * totalPeopleCount);\n    }\n    return tickArray;\n  };\n  const yTickValues = setYTickValues();\n\n  return (\n    <FlexibleXYPlot animation stackBy='y' yDomain={yDomain} xDomain={xDomain} curve='curveCardinal'>\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <XAxis\n        animation\n        attr='x'\n        attrAxis='y'\n        orientation='bottom'\n        tickValues={xTickValues}\n        tickFormat={(n) => n}\n        title='days'\n        position='end'\n      />\n      <YAxis\n        title='% infected'\n        position='end'\n        animation\n        attr='y'\n        attrAxis='x'\n        orientation='left'\n        tickValues={yTickValues}\n        tickFormat={(n) => (n / totalPeopleCount) * 100}\n      />\n      <AreaSeries animation data={infectedGraphData} opacity={0.5} style={{}} color='red' />\n    </FlexibleXYPlot>\n  );\n};\n\nexport default Graph;\n","export function shuffleArray(arrayToShuffle) {\n  for (\n    var j, x, i = arrayToShuffle.length;\n    i;\n    j = parseInt(Math.random() * i),\n      x = arrayToShuffle[--i],\n      arrayToShuffle[i] = arrayToShuffle[j],\n      arrayToShuffle[j] = x\n  );\n  return arrayToShuffle;\n}\n\nexport function getInfectedPeopleCount(people) {\n  return people.filter((person) => !person.isCured && person.infectedDay >= 0).length;\n}\n","import { getInfectedPeopleCount } from '../utils/utils';\n\nexport default function reducer(state, { type, payload }) {\n  switch (type) {\n    case 'INCREMENT_DAY':\n      const newDayNumber = state.day + 1;\n      // Move people\n      const movedPeople = state.people.reduce((newPeople, person, index) => {\n        if (['SOCIALLY_DISTANCED', 'QUARANTINED'].includes(person.mobility)) return newPeople;\n        const newLocation = calculateMove(person.location, state.gridSize);\n\n        if (\n          newPeople.some(\n            (person) => person.location.x === newLocation.x && person.location.y === newLocation.y\n          )\n        ) {\n          newPeople[index] = person;\n        } else {\n          newPeople[index] = { ...person, location: newLocation };\n        }\n\n        return newPeople;\n      }, state.people);\n\n      // Infect\n      function infect() {\n        let peopleCopy = [...state.people];\n        const peopleToRecover = peopleCopy\n          .filter(\n            (person) =>\n              person.infectedDay !== -1 && !person.isCured && state.day - person.infectedDay > 19\n          )\n          .map((person) => person.id);\n        peopleCopy = peopleCopy.map((person) => {\n          if (peopleToRecover.includes(person.id)) person.isCured = true;\n          return person;\n        });\n\n        const contagiousPeople = state.people.filter(\n          (person) =>\n            person.infectedDay >= 0 && !person.isCured && person.mobility !== 'QUARANTINED'\n        );\n        let infectionZones = contagiousPeople.map((person) => {\n          const neighborLocations = getSurroundingCells(person.location)\n            .filter((location) => ['N', 'E', 'S', 'W'].includes(location.direction))\n            .map((surroundingCell) => surroundingCell.coordinates);\n\n          return neighborLocations;\n        });\n        infectionZones = infectionZones.flat();\n        const newlyInfectedPeople = state.people.map((person) => {\n          if (\n            person.infectedDay === -1 &&\n            infectionZones.some(\n              (infectionZone) =>\n                person.location.x === infectionZone.x && person.location.y === infectionZone.y\n            )\n          ) {\n            const chanceOfGettingInfected = person.mobility === 'SOCIALLY_DISTANCED' ? 0.5 : 1;\n            if (Math.random() <= chanceOfGettingInfected) person.infectedDay = state.day;\n          }\n          return person;\n        });\n\n        return newlyInfectedPeople;\n      }\n      const movedInfectedPeople = infect(movedPeople);\n      return {\n        ...state,\n        day: newDayNumber,\n        people: movedInfectedPeople,\n        historicalInfectedCount: [\n          ...state.historicalInfectedCount,\n          { day: newDayNumber, count: getInfectedPeopleCount(movedInfectedPeople) },\n        ],\n      };\n\n    case 'UPDATE_PERSON_MOBILITY':\n      const newPeople = [...state.people];\n      const personIndex = newPeople.findIndex((person) => person.id === payload.id);\n      newPeople[personIndex].mobility = payload.mobility;\n\n      return { ...state, people: newPeople };\n    default:\n      return state;\n  }\n}\n\nfunction calculateMove(location, gridSize) {\n  const possibleMoves = getSurroundingCells(location, gridSize);\n  const newLocation = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n\n  return newLocation.coordinates;\n}\n\nfunction getSurroundingCells(location, gridSize) {\n  const { x, y } = location;\n  let surroundingCells = [\n    { direction: 'N', coordinates: { x: x + 0, y: y + 1 } },\n    { direction: 'NE', coordinates: { x: x + 1, y: y + 1 } },\n    { direction: 'E', coordinates: { x: x + 1, y: y + 0 } },\n    { direction: 'SE', coordinates: { x: x + 1, y: y - 1 } },\n    { direction: 'S', coordinates: { x: x + 0, y: y - 1 } },\n    { direction: 'SW', coordinates: { x: x - 1, y: y - 1 } },\n    { direction: 'W', coordinates: { x: x - 1, y: y + 0 } },\n    { direction: 'NW', coordinates: { x: x - 1, y: y + 1 } },\n  ];\n\n  if (isOnLeftEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => !['NW', 'W', 'SW'].includes(move.direction)\n    );\n  if (isOnBottomEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => !['SW', 'S', 'SE'].includes(move.direction)\n    );\n  if (isOnRightEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => !['SE', 'E', 'NE'].includes(move.direction)\n    );\n  if (isOnTopEdge(location))\n    surroundingCells = surroundingCells.filter(\n      (move) => !['NE', 'N', 'NW'].includes(move.direction)\n    );\n\n  return surroundingCells;\n\n  function isOnLeftEdge(location) {\n    return location.x === 0;\n  }\n  function isOnBottomEdge(location) {\n    return location.y === 0;\n  }\n  function isOnRightEdge(location) {\n    return location.x === gridSize - 1;\n  }\n  function isOnTopEdge(location) {\n    return location.y === gridSize - 1;\n  }\n}\n","import React, { useReducer } from 'react';\nimport styled from 'styled-components';\nimport GameBoard from './components/GameBoard';\nimport Graph from './components/Graph';\nimport { shuffleArray, getInfectedPeopleCount } from './utils/utils';\nimport reducer from './state/gameReducer';\nimport './App.css';\n\nfunction App() {\n  const initialState = {\n    day: 0,\n    people: [],\n    historicalInfectedCount: [{ day: 0, count: 0 }],\n    gridSize: 25,\n    boardSize: 700,\n    peopleDensity: 0.3,\n  };\n\n  function init(initialState) {\n    const { gridSize, peopleDensity } = initialState;\n    const numberOfPeople = Math.floor(gridSize * gridSize * peopleDensity) || 4;\n    const generateInitialPeople = () => {\n      const allPositions = generateAllPositions();\n      let shuffledLocations = shuffleArray(allPositions);\n      const people = shuffledLocations.slice(0, numberOfPeople).map((location, index) => {\n        return {\n          id: index,\n          location,\n          infectedDay: -1,\n          isCured: false,\n          mobility: 'FREE',\n        };\n      });\n      return people;\n    };\n\n    function generateAllPositions() {\n      let positionList = [];\n      for (let x = 0; x < gridSize; x++) {\n        for (let y = 0; y < gridSize; y++) {\n          positionList.push({ x, y });\n        }\n      }\n      return positionList;\n    }\n\n    const initialPeople = generateInitialPeople();\n    const indexToInfect = Math.floor(Math.random() * initialPeople.length);\n    initialPeople[indexToInfect].infectedDay = 0;\n    return { ...initialState, people: initialPeople };\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState, init);\n  const { day, people, historicalInfectedCount, gridSize, boardSize, peopleDensity } = state;\n\n  const cellSize = boardSize / gridSize;\n  const gameMetrics = { gridSize, boardSize, peopleDensity };\n\n  const infectedPeopleCount = getInfectedPeopleCount(people);\n  const curedPeopleCount = people.filter((person) => person.isCured).length;\n  const totalPeopleCount = people.length || 100;\n\n  return (\n    <GameGrid>\n      <GameBoard\n        {...gameMetrics}\n        dispatch={dispatch}\n        people={people}\n        day={day}\n        gridSize={gridSize}\n        boardSize={boardSize}\n      />\n      <p>Infected: {infectedPeopleCount}</p>\n      <p>Recovered: {curedPeopleCount}</p>\n      <GraphContainer>\n        <Graph\n          day={day}\n          historicalInfectedCount={historicalInfectedCount}\n          totalPeopleCount={totalPeopleCount}\n        />\n      </GraphContainer>\n    </GameGrid>\n  );\n}\n\nconst GameGrid = styled.main`\n  background-color: #454545;\n  color: rgba(255, 255, 255, 0.8);\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst GraphContainer = styled.div`\n  width: 100vw;\n  height: 100vw;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// export const GameContext = createContext(initialState);\n\n// const Store = ({ children }) => {\n//   const [state, dispatch] = useReducer(Reducer, initialState);\n//   return <GameContext.Provider value={[state, dispatch]}>{children}</GameContext.Provider>;\n// };\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}